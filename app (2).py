{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3ab219f2-42d1-4659-b08f-a59f8e62168b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DeltaGenerator()"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Save this as app.py\n",
    "\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import joblib\n",
    "\n",
    "# Load the saved model and scaler\n",
    "model = joblib.load('autism_best_model.pkl')\n",
    "scaler = joblib.load('scaler.pkl')\n",
    "\n",
    "# App Title\n",
    "st.title(\"Early Prediction of Autism Using ML Models\")\n",
    "st.subheader(\"Fill in the following information:\")\n",
    "\n",
    "# Input form for user\n",
    "def user_input_features():\n",
    "    A1_Score = st.selectbox('A1 Score', (0, 1))\n",
    "    A2_Score = st.selectbox('A2 Score', (0, 1))\n",
    "    A3_Score = st.selectbox('A3 Score', (0, 1))\n",
    "    A4_Score = st.selectbox('A4 Score', (0, 1))\n",
    "    A5_Score = st.selectbox('A5 Score', (0, 1))\n",
    "    A6_Score = st.selectbox('A6 Score', (0, 1))\n",
    "    A7_Score = st.selectbox('A7 Score', (0, 1))\n",
    "    A8_Score = st.selectbox('A8 Score', (0, 1))\n",
    "    A9_Score = st.selectbox('A9 Score', (0, 1))\n",
    "    A10_Score = st.selectbox('A10 Score', (0, 1))\n",
    "    age = st.slider('Age', 2, 60, 25)\n",
    "    gender = st.selectbox('Gender (0=Female, 1=Male)', (0, 1))\n",
    "    jaundice = st.selectbox('History of Jaundice? (0=No, 1=Yes)', (0, 1))\n",
    "    family_mem_with_ASD = st.selectbox('Family Member with ASD? (0=No, 1=Yes)', (0, 1))\n",
    "\n",
    "    data = {\n",
    "        'A1_Score': A1_Score,\n",
    "        'A2_Score': A2_Score,\n",
    "        'A3_Score': A3_Score,\n",
    "        'A4_Score': A4_Score,\n",
    "        'A5_Score': A5_Score,\n",
    "        'A6_Score': A6_Score,\n",
    "        'A7_Score': A7_Score,\n",
    "        'A8_Score': A8_Score,\n",
    "        'A9_Score': A9_Score,\n",
    "        'A10_Score': A10_Score,\n",
    "        'age': age,\n",
    "        'gender': gender,\n",
    "        'jaundice': jaundice,\n",
    "        'family_mem_with_ASD': family_mem_with_ASD\n",
    "    }\n",
    "    features = pd.DataFrame(data, index=[0])\n",
    "    return features\n",
    "\n",
    "input_df = user_input_features()\n",
    "\n",
    "# Main Prediction\n",
    "# Risk Level based on prediction probability\n",
    "if st.button('Predict Autism Risk'):\n",
    "    scaled_input = scaler.transform(input_df)\n",
    "    prediction = model.predict(scaled_input)\n",
    "    prediction_proba = model.predict_proba(scaled_input)\n",
    "\n",
    "    confidence = np.max(prediction_proba) * 100\n",
    "\n",
    "    # Define custom risk levels\n",
    "    if prediction[0] == 1:\n",
    "        if confidence >= 85:\n",
    "            st.error(f'**High Risk of Autism** üö® (Confidence: {confidence:.2f}%)')\n",
    "        else:\n",
    "            st.warning(f'**Moderate Risk of Autism** ‚ö†Ô∏è (Confidence: {confidence:.2f}%)')\n",
    "    else:\n",
    "        if confidence >= 85:\n",
    "            st.success(f'**Low Risk of Autism** ‚úÖ (Confidence: {confidence:.2f}%)')\n",
    "        else:\n",
    "            st.info(f'**Very Low Risk of Autism** üõ°Ô∏è (Confidence: {confidence:.2f}%)')\n",
    "\n",
    "#Feature Importance Visualization\n",
    "st.markdown(\"---\")\n",
    "st.subheader(\"Feature Importance Analysis\")\n",
    "\n",
    "if st.button('Show Feature Importances'):\n",
    "    # For Logistic Regression: use absolute value of coefficients\n",
    "    feature_importances = np.abs(model.coef_[0])\n",
    "    feature_names = X.columns  # Make sure X.columns are available in app.py\n",
    "\n",
    "    importance_df = pd.DataFrame({\n",
    "        'Feature': feature_names,\n",
    "        'Importance': feature_importances\n",
    "    }).sort_values(by='Importance', ascending=False)\n",
    "\n",
    "    st.bar_chart(importance_df.set_index('Feature'))\n",
    "\n",
    "    st.markdown(\"\"\"\n",
    "    Higher importance values indicate stronger influence of that feature on the model's prediction.  \n",
    "    Positive/Negative signs are ignored to focus purely on strength of impact.\n",
    "    \"\"\")\n",
    "    \n",
    "# Footer\n",
    "st.markdown(\"\"\"\n",
    "---\n",
    "**Disclaimer:** This is a preliminary screening tool based on questionnaire responses.  \n",
    "It is not a substitute for clinical diagnosis.\n",
    "\"\"\")\n",
    "\n",
    "# Footer\n",
    "st.markdown(\"\"\"\n",
    "---\n",
    "**Note:** This is a preliminary screening tool based on questionnaire data and not a clinical diagnosis.  \n",
    "For medical advice, consult healthcare professionals.\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 'null',
   "id": "f7655e66-1250-4178-8a9b-cc210e66cf2c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
